#!/usr/bin/python3
#
# time_plot.py
# Molecular Dynamics Simulation of a Van der Waals Gas
# Ricard Rodriguez
#
# Plot the results of the time analysis for the parallel version of the code.
# Depends on the files generated by the 'vdw_gas_time.sh' shell script.
#

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from pathlib import Path


# Plot appearance settings.
plt.style.use('./mplstyle/science.mplstyle')
plt.rcParams.update({
    "text.usetex": True,
    "font.family": "STIXGeneral"
})

# Create a line chart depicting the time spent on a certain part of the
# simulation across the different simulations (each one with a different amount
# of processors).
def plot_part_time_per_core(data_file, output_filename):
    data = np.loadtxt(data_file)

    plt.plot(data[:, 0], data[:, 1], label = 'CPU Time')
    plt.plot(data[:, 0], data[:, 2], label = 'Wallclock Time')
    plt.xlabel('\# Cores')
    plt.ylabel(r'$t$ (s)')
    plt.legend()
    plt.savefig(output_filename, format = 'pdf')
    plt.close()

    print(f"Plot saved as {output_filename}")

# Create a pie chart that depicts the time spent on each part of the code for a
# single simulation with a set number of cores (or processors).
def plot_time_piechart(data_file, output_filename_1, output_filename_2):
    data = pd.read_csv(data_file, delimiter = "\t", skiprows = 1, header = None)
    labels = data.iloc[:, 0]
    cpu_time = data.iloc[:, 1]
    wallclock_time = data.iloc[:,2]

    plt.pie(cpu_time, labels = labels, autopct = '%1.1f%%')
    plt.savefig(output_filename_1, format = 'pdf')
    plt.close()

    print(f"CPU time plot saved as {output_filename_1}")

    plt.pie(wallclock_time, labels = labels, autopct = '%1.1f%%')
    plt.savefig(output_filename_2, format = 'pdf')
    plt.close()

    print(f"Wallclock time plot saved as {output_filename_2}")


if __name__ == '__main__':
    measure_list = [
        'initial_configuration',
        'system_evolution',
        'post-trajectory_analysis'
    ]

    for measure in measure_list:
        data_file = f"time_{measure}.out"
        output_file = f"time_vdw_gas_{measure}.pdf"

        plot_part_time_per_core(data_file, output_file)

    for core in [1, 2, 4, 8, 16, 32, 20]:
        data_file = f"time_vdw_gas_{core}_core.out"
        data_path = Path('./' + data_file)

        output_cpu = f"time_vdw_gas_{core}_core_cpu.pdf"
        output_wallclock = f"time_vdw_gas_{core}_core_wallclock.pdf"

        try:
            data_path.resolve(strict=True)
        except FileNotFoundError:
            print(f"{data_file} not found. Skipping...")
        else:
            plot_time_piechart(data_file, output_cpu, output_wallclock)
